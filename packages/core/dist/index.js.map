{"version":3,"file":"index.js","sources":["../src/core.ts","../src/install.ts","../src/util/console.ts","../src/index.ts"],"sourcesContent":["import { install } from \"./install\";\nimport ThemeProvider from \"./themeProvider\";\n\n// Types\nimport Vue from \"vue\";\n// import {\n//   UserVuetifyPreset,\n//   VuetifyPreset,\n// } from 'vuetify/types/services/presets'\n// import {\n//   VuetifyService,\n//   VuetifyServiceContract,\n// } from 'vuetify/types/services'\n\n// // Services\n// import * as services from './services'\n\nexport default class VueUI {\n  static install = install;\n\n  static installed = false;\n\n  // static version = __VUETIFY_VERSION__\n\n  // public framework: Dictionary<VuetifyServiceContract> = {}\n\n  // public installed: string[] = []\n\n  // public preset = {} as {}\n\n  // public userPreset: UserVuetifyPreset = {}\n\n  constructor(userPreset: {} = {}) {\n    // this.userPreset = userPreset;\n    // this.use(services.Presets)\n    // this.use(services.Application)\n    // this.use(services.Breakpoint)\n    // this.use(services.Goto)\n    // this.use(services.Icons)\n    // this.use(services.Lang)\n    // this.use(services.Theme)\n  }\n\n  // Called on the new vuetify instance\n  // bootstrap in install beforeCreate\n  // Exposes ssrContext if available\n  init(root: Vue, ssrContext?: object) {\n    // this.installed.forEach(property => {\n    //   const service = this.framework[property]\n    //   service.framework = this.framework\n    //   service.init(root, ssrContext)\n    // })\n    // rtl is not installed and\n    // will never be called by\n    // the init process\n    // this.framework.rtl = Boolean(this.preset.rtl) as any\n  }\n\n  // Instantiate a VuetifyService\n  use(Service: {}) {\n    // const property = Service.property\n    // if (this.installed.includes(property)) return\n    // // TODO maybe a specific type for arg 2?\n    // this.framework[property] = new Service(this.preset, this as any)\n    // this.installed.push(property)\n  }\n}\n","// Import vue components\n// import * as components from \"./components\";\nimport OurVue, { VueConstructor } from \"vue\";\nimport { consoleError } from \"./util/console\";\nimport ThemeProvider from \"./themeProvider\";\n\n// install function executed by Vue.use()\nexport function install(Vue: VueConstructor, options: {}) {\n  console.log(\"options: \", options);\n  if ((install as any).installed) return;\n  (install as any).installed = true;\n\n  if (OurVue !== Vue) {\n    consoleError(\n      \"Multiple instances of Vue detected\\nSee https://github.com/vuetifyjs/vuetify/issues/4068\\n\\nIf you're seeing \\\"$attrs is readonly\\\", it's caused by this\"\n    );\n  }\n\n  // Used to avoid multiple mixins being setup\n  // when in dev mode and hot module reload\n  // https://github.com/vuejs/vue/issues/5089#issuecomment-284260111\n  if (Vue.$_vueui_installed) return;\n  Vue.$_vueui_installed = true;\n\n  Vue.mixin({\n    beforeCreate() {\n      const options = this.$options as any;\n\n      if (options.vuetify) {\n        options.vuetify.init(this, options.ssrContext);\n        // this.$vuetify = Vue.observable(options.vuetify.framework)\n      } else {\n        // this.$vuetify = (options.parent && options.parent.$vuetify) || this\n      }\n    }\n  });\n\n  // const $theme = new ThemeProvider(options);\n\n  // Vue.prototype.$theme = Vue.observable($theme);\n\n  // Object.keys(components).forEach(componentName => {\n  //   Vue.component(componentName, components[componentName]);\n  // });\n}\n\n// Create module definition for Vue.use()\n// const plugin: Vue.PluginObject = {\n//   install\n// };\n\n// // To auto-install when vue is found\n// /* global window global */\n// let GlobalVue = null;\n// if (typeof window !== \"undefined\") {\n//   GlobalVue = window.Vue;\n// } else if (typeof global !== \"undefined\") {\n//   GlobalVue = global.Vue;\n// }\n// if (GlobalVue) {\n//   GlobalVue.use(plugin);\n// }\n\n// Default export is library as a whole, registered via Vue.use()\n// export default plugin;\n\n// To allow individual component use, export components\n// each can be registered via Vue.component()\n// export * from \"./components/index\";\n","function createMessage(message: string, vm?: any, parent?: any): string | void {\n  if (parent) {\n    vm = {\n      _isVue: true,\n      $parent: parent,\n      $options: vm\n    };\n  }\n\n  if (vm) {\n    // Only show each message once per instance\n    vm.$_alreadyWarned = vm.$_alreadyWarned || [];\n    if (vm.$_alreadyWarned.includes(message)) return;\n    vm.$_alreadyWarned.push(message);\n  }\n\n  return `[Vuetify] ${message}` + (vm ? generateComponentTrace(vm) : \"\");\n}\n\nexport function consoleInfo(message: string, vm?: any, parent?: any): void {\n  const newMessage = createMessage(message, vm, parent);\n  newMessage != null && console.info(newMessage);\n}\n\nexport function consoleWarn(message: string, vm?: any, parent?: any): void {\n  const newMessage = createMessage(message, vm, parent);\n  newMessage != null && console.warn(newMessage);\n}\n\nexport function consoleError(message: string, vm?: any, parent?: any): void {\n  const newMessage = createMessage(message, vm, parent);\n  newMessage != null && console.error(newMessage);\n}\n\nexport function deprecate(\n  original: string,\n  replacement: string,\n  vm?: any,\n  parent?: any\n) {\n  consoleWarn(\n    `[UPGRADE] '${original}' is deprecated, use '${replacement}' instead.`,\n    vm,\n    parent\n  );\n}\nexport function breaking(\n  original: string,\n  replacement: string,\n  vm?: any,\n  parent?: any\n) {\n  consoleError(\n    `[BREAKING] '${original}' has been removed, use '${replacement}' instead. For more information, see the upgrade guide https://github.com/vuetifyjs/vuetify/releases/tag/v2.0.0#user-content-upgrade-guide`,\n    vm,\n    parent\n  );\n}\nexport function removed(original: string, vm?: any, parent?: any) {\n  consoleWarn(\n    `[REMOVED] '${original}' has been removed. You can safely omit it.`,\n    vm,\n    parent\n  );\n}\n\n/**\n * Shamelessly stolen from vuejs/vue/blob/dev/src/core/util/debug.js\n */\n\nconst classifyRE = /(?:^|[-_])(\\w)/g;\nconst classify = (str: string) =>\n  str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, \"\");\n\nfunction formatComponentName(vm: any, includeFile?: boolean): string {\n  if (vm.$root === vm) {\n    return \"<Root>\";\n  }\n  const options =\n    typeof vm === \"function\" && vm.cid != null\n      ? vm.options\n      : vm._isVue\n      ? vm.$options || vm.constructor.options\n      : vm || {};\n  let name = options.name || options._componentTag;\n  const file = options.__file;\n  if (!name && file) {\n    const match = file.match(/([^/\\\\]+)\\.vue$/);\n    name = match && match[1];\n  }\n\n  return (\n    (name ? `<${classify(name)}>` : `<Anonymous>`) +\n    (file && includeFile !== false ? ` at ${file}` : \"\")\n  );\n}\n\nfunction generateComponentTrace(vm: any): string {\n  if (vm._isVue && vm.$parent) {\n    const tree: any[] = [];\n    let currentRecursiveSequence = 0;\n    while (vm) {\n      if (tree.length > 0) {\n        const last: any = tree[tree.length - 1];\n        if (last.constructor === vm.constructor) {\n          currentRecursiveSequence++;\n          vm = vm.$parent;\n          continue;\n        } else if (currentRecursiveSequence > 0) {\n          tree[tree.length - 1] = [last, currentRecursiveSequence];\n          currentRecursiveSequence = 0;\n        }\n      }\n      tree.push(vm);\n      vm = vm.$parent;\n    }\n    return (\n      \"\\n\\nfound in\\n\\n\" +\n      tree\n        .map(\n          (vm, i) =>\n            `${i === 0 ? \"---> \" : \" \".repeat(5 + i * 2)}${\n              Array.isArray(vm)\n                ? `${formatComponentName(vm[0])}... (${vm[1]} recursive calls)`\n                : formatComponentName(vm)\n            }`\n        )\n        .join(\"\\n\")\n    );\n  } else {\n    return `\\n\\n(found in ${formatComponentName(vm)})`;\n  }\n}\n","import VueUI from \"./core\";\n\nexport default VueUI;\n\nconst install = VueUI.install;\n\nVueUI.install = (Vue, args) => {\n  install.call(VueUI, Vue, {\n    ...args\n  });\n};\n\nif (typeof window !== \"undefined\" && window.Vue) {\n  window.Vue.use(VueUI);\n}\n"],"names":["VueUI","constructor","userPreset","init","root","ssrContext","use","Service","install","Vue","options","newMessage","console","log","installed","OurVue","error","$_vueui_installed","mixin","beforeCreate","this","$options","vuetify","const","args","call","Object","window"],"mappings":"0EAiBqBA,EAenBC,SAAYC,kBAAiB,iBAc7BC,cAAKC,EAAWC,iBAahBC,aAAIC,KAzCGP,mBCXOQ,EAAQC,EAAqBC,OCuBrCC,EDtBNC,QAAQC,IAAI,YAAaH,GACpBF,EAAgBM,YACpBN,EAAgBM,WAAY,EAEzBC,IAAWN,GCmBD,OADRE,yKACgBC,QAAQI,MAAML,GDVhCF,EAAIQ,oBACRR,EAAIQ,mBAAoB,EAExBR,EAAIS,MAAM,CACRC,4BACQT,EAAUU,KAAKC,SAEjBX,EAAQY,SACVZ,EAAQY,QAAQnB,KAAKiB,KAAMV,EAAQL,kBDTlCL,aAAY,EGhBrBuB,IAAMf,EAAUR,EAAMQ,QAEtBR,EAAMQ,iBAAWC,EAAKe,GACpBhB,EAAQiB,KAAKzB,EAAOS,EAAKiB,iBACpBF,KAIe,oBAAXG,QAA0BA,OAAOlB,KAC1CkB,OAAOlB,IAAIH,IAAIN"}